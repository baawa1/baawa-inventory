generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                                                     Int                    @id @default(autoincrement())
  firstName                                              String                 @map("first_name") @db.VarChar(100)
  lastName                                               String                 @map("last_name") @db.VarChar(100)
  email                                                  String                 @unique @db.VarChar(255)
  password                                               String?                @map("password_hash") @db.VarChar(255)
  phone                                                  String?                @db.VarChar(20)
  isActive                                               Boolean                @default(true) @map("is_active")
  lastLogin                                              DateTime?              @map("last_login") @db.Timestamptz(6)
  lastLogout                                             DateTime?              @map("last_logout") @db.Timestamptz(6)
  lastActivity                                           DateTime?              @map("last_activity") @db.Timestamptz(6)
  resetToken                                             String?                @map("reset_token") @db.VarChar(255)
  resetTokenExpires                                      DateTime?              @map("reset_token_expires") @db.Timestamptz(6)
  emailVerified                                          Boolean                @default(false) @map("email_verified")
  emailVerifiedAt                                        DateTime?              @map("email_verified_at") @db.Timestamptz(6)
  emailVerificationToken                                 String?                @map("email_verification_token") @db.VarChar(255)
  emailVerificationExpires                               DateTime?              @map("email_verification_expires") @db.Timestamptz(6)
  approvedBy                                             Int?                   @map("approved_by")
  approvedAt                                             DateTime?              @map("approved_at") @db.Timestamptz(6)
  rejectionReason                                        String?                @map("rejection_reason")
  emailNotifications                                     Boolean?               @default(true) @map("email_notifications")
  createdAt                                              DateTime?              @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt                                              DateTime?              @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  avatar_url                                             String?
  permissions                                            String[]
  role                                                   UserRole               @default(STAFF)
  userStatus                                             UserStatus             @default(PENDING) @map("user_status")
  sessionNeedsRefresh                                    Boolean                @default(false) @map("session_needs_refresh")
  sessionRefreshAt                                       DateTime?              @map("session_refresh_at") @db.Timestamptz(6)
  ai_content                                             AIContent[]
  audit_logs                                             AuditLog[]
  coupons                                                Coupon[]               @relation("CouponCreator")
  generatedReports                                       FinancialReport[]      @relation("ReportGenerator")
  approvedTransactions                                   FinancialTransaction[] @relation("TransactionApprover")
  createdTransactions                                    FinancialTransaction[] @relation("TransactionCreator")
  sales_transactions                                     SalesTransaction[]
  stockAdditions                                         StockAddition[]        @relation("StockAdditionCreator")
  stock_adjustments_stock_adjustments_user_idTousers     StockAdjustment[]      @relation("stock_adjustments_user_idTousers")
  stock_adjustments_stock_adjustments_approved_byTousers StockAdjustment[]      @relation("stock_adjustments_approved_byTousers")
  approvedReconciliations                                StockReconciliation[]  @relation("ReconciliationApprover")
  createdReconciliations                                 StockReconciliation[]  @relation("ReconciliationCreator")
  approver                                               User?                  @relation("UserApproval", fields: [approvedBy], references: [id], onDelete: NoAction, onUpdate: NoAction)
  approvedUsers                                          User[]                 @relation("UserApproval")

  @@index([approvedBy], map: "idx_users_approved_by")
  @@index([email], map: "idx_users_email")
  @@index([emailVerificationToken], map: "idx_users_email_verification_token")
  @@index([emailVerified], map: "idx_users_email_verified")
  @@index([isActive], map: "idx_users_is_active")
  @@index([lastActivity], map: "idx_users_last_activity")
  @@index([lastLogin], map: "idx_users_last_login")
  @@index([role], map: "idx_users_role")
  @@index([userStatus], map: "idx_users_user_status")
  @@map("users")
}

/// This model contains an expression index which requires additional setup for migrations. Visit https://pris.ly/d/expression-indexes for more info.
model Supplier {
  id             Int             @id @default(autoincrement())
  name           String          @db.VarChar(255)
  contactPerson  String?         @map("contact_person") @db.VarChar(255)
  email          String?         @db.VarChar(255)
  phone          String?         @db.VarChar(20)
  address        String?
  city           String?         @db.VarChar(100)
  state          String?         @db.VarChar(100)
  website        String?         @db.VarChar(255)
  notes          String?
  createdAt      DateTime?       @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt      DateTime?       @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  products       Product[]
  stockAdditions StockAddition[]

  @@index([contactPerson], map: "idx_suppliers_contact")
  @@index([email], map: "idx_suppliers_email")
  @@index([name], map: "idx_suppliers_name")
  @@map("suppliers")
}

model Category {
  id          Int        @id @default(autoincrement())
  name        String     @db.VarChar(100)
  description String?
  isActive    Boolean    @default(true) @map("is_active")
  wordpress_id Int?      @map("wordpress_id")
  createdAt   DateTime   @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt   DateTime   @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  parentId    Int?       @map("parent_id")
  image       String?    @db.VarChar(500)
  parent      Category?  @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children    Category[] @relation("CategoryHierarchy")
  products    Product[]

  @@unique([name, parentId], name: "unique_category_name_per_parent")
  @@index([parentId], map: "idx_categories_parent_id")
  @@map("categories")
}

model Brand {
  id          Int       @id @default(autoincrement())
  name        String    @unique @db.VarChar(100)
  description String?
  website     String?   @db.VarChar(255)
  isActive    Boolean?  @default(true) @map("is_active")
  wordpress_id Int?     @map("wordpress_id")
  createdAt   DateTime? @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt   DateTime? @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  image       String?   @db.VarChar(500)
  products    Product[]

  @@index([isActive], map: "idx_brands_is_active")
  @@index([name], map: "idx_brands_name")
  @@map("brands")
}

model Product {
  id                  Int                       @id @default(autoincrement())
  name                String                    @db.VarChar(255)
  description         String?
  sku                 String                    @unique @db.VarChar(100)
  cost                Decimal                   @db.Decimal(10, 2)
  price               Decimal                   @db.Decimal(10, 2)
  stock               Int                       @default(0)
  minStock            Int                       @default(0) @map("min_stock")
  hasVariants         Boolean                   @default(false) @map("has_variants")
  isArchived          Boolean                   @default(false) @map("is_archived")
  tags                String[]
  wordpress_id        Int?                      @map("wordpress_id")
  createdAt           DateTime?                 @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt           DateTime?                 @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  supplierId          Int?                      @map("supplier_id")
  categoryId          Int?                      @map("category_id")
  brandId             Int?                      @map("brand_id")
  images              Json?
  status              ProductStatus             @default(ACTIVE)
  syncStats           Boolean                   @default(false) @map("sync_stats")
  isService           Boolean                   @default(false) @map("is_service")
  ai_content          AIContent[]
  product_variants    ProductVariant[]
  brand               Brand?                    @relation(fields: [brandId], references: [id], onUpdate: NoAction)
  category            Category?                 @relation(fields: [categoryId], references: [id], onUpdate: NoAction)
  supplier            Supplier?                 @relation(fields: [supplierId], references: [id], onUpdate: NoAction)
  sales_items         SalesItem[]
  stockAdditions      StockAddition[]
  stock_adjustments   StockAdjustment[]
  reconciliationItems StockReconciliationItem[]

  @@index([sku], map: "idx_products_sku")
  @@index([status], map: "idx_products_status")
  @@index([stock], map: "idx_products_stock")
  @@index([supplierId], map: "idx_products_supplier_id")
  @@index([isService], map: "idx_products_is_service")
  @@map("products")
}

model ProductVariant {
  id                Int               @id @default(autoincrement())
  name              String            @db.VarChar(255)
  sku               String            @unique @db.VarChar(100)
  price             Decimal           @db.Decimal(10, 2)
  cost              Decimal?          @db.Decimal(10, 2)
  color             String?           @db.VarChar(100)
  wordpress_id      Int?              @map("wordpress_id")
  created_at        DateTime?         @default(now()) @db.Timestamptz(6)
  current_stock     Int               @default(0)
  dimensions        Json?
  is_active         Boolean           @default(true)
  material          String?           @db.VarChar(100)
  max_stock_level   Int?
  min_stock_level   Int?              @default(0)
  product_id        Int
  size              String?           @db.VarChar(50)
  updated_at        DateTime?         @default(now()) @db.Timestamptz(6)
  weight            Decimal?          @db.Decimal(8, 3)
  images            Json?
  products          Product           @relation(fields: [product_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  sales_items       SalesItem[]
  stock_adjustments StockAdjustment[]

  @@index([product_id], map: "idx_product_variants_product_id")
  @@index([sku], map: "idx_product_variants_sku")
  @@map("product_variants")
}

model SalesTransaction {
  id                 Int              @id @default(autoincrement())
  subtotal           Decimal          @db.Decimal(10, 2)
  notes              String?
  wordpress_id       Int?             @map("wordpress_id")
  created_at         DateTime?        @default(now()) @db.Timestamptz(6)
  discount_amount    Decimal          @default(0) @db.Decimal(10, 2)
  payment_method     String           @db.VarChar(50)
  payment_status     String           @default("pending") @db.VarChar(20)
  tax_amount         Decimal          @default(0) @db.Decimal(10, 2)
  total_amount       Decimal          @db.Decimal(10, 2)
  transaction_number String           @unique @db.VarChar(50)
  transaction_type   String           @default("sale") @db.VarChar(20)
  updated_at         DateTime?        @default(now()) @db.Timestamptz(6)
  user_id            Int
  customer_id        Int?
  sales_items        SalesItem[]
  customer           Customer?        @relation(fields: [customer_id], references: [id])
  users              User             @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  split_payments     SplitPayment[]
  transaction_fees   TransactionFee[]

  @@index([created_at], map: "idx_sales_transactions_created_at")
  @@index([payment_status], map: "idx_sales_transactions_payment_status")
  @@index([transaction_number], map: "idx_sales_transactions_transaction_number")
  @@index([user_id], map: "idx_sales_transactions_user_id")
  @@index([customer_id], map: "idx_sales_transactions_customer_id")
  @@index([payment_status, created_at], map: "idx_sales_transactions_payment_status_created_at")
  @@map("sales_transactions")
}

model SalesItem {
  id                 Int              @id @default(autoincrement())
  quantity           Int
  created_at         DateTime?        @default(now()) @db.Timestamptz(6)
  discount_amount    Decimal?         @default(0) @db.Decimal(10, 2)
  product_id         Int?
  total_price        Decimal          @db.Decimal(10, 2)
  transaction_id     Int
  unit_price         Decimal          @db.Decimal(10, 2)
  variant_id         Int?
  coupon_id          Int?
  coupon             Coupon?          @relation(fields: [coupon_id], references: [id], onUpdate: NoAction)
  products           Product?         @relation(fields: [product_id], references: [id], onUpdate: NoAction)
  sales_transactions SalesTransaction @relation(fields: [transaction_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  product_variants   ProductVariant?  @relation(fields: [variant_id], references: [id], onUpdate: NoAction)

  @@index([product_id], map: "idx_sales_items_product_id")
  @@index([transaction_id], map: "idx_sales_items_transaction_id")
  @@index([variant_id], map: "idx_sales_items_variant_id")
  @@index([coupon_id], map: "idx_sales_items_coupon_id")
  @@map("sales_items")
}

model SplitPayment {
  id                 Int              @id @default(autoincrement())
  amount             Decimal          @db.Decimal(10, 2)
  payment_method     String           @db.VarChar(50)
  transaction_id     Int
  created_at         DateTime?        @default(now()) @db.Timestamptz(6)
  sales_transactions SalesTransaction @relation(fields: [transaction_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([transaction_id], map: "idx_split_payments_transaction_id")
  @@index([payment_method], map: "idx_split_payments_payment_method")
  @@map("split_payments")
}

model StockAddition {
  id           Int       @id @default(autoincrement())
  quantity     Int
  costPerUnit  Decimal   @map("cost_per_unit") @db.Decimal(10, 2)
  totalCost    Decimal   @map("total_cost") @db.Decimal(10, 2)
  purchaseDate DateTime? @default(now()) @map("purchase_date") @db.Timestamptz(6)
  notes        String?
  referenceNo  String?   @map("reference_no") @db.VarChar(255)
  createdAt    DateTime? @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt    DateTime? @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  productId    Int       @map("product_id")
  supplierId   Int?      @map("supplier_id")
  createdById  Int       @map("created_by")
  createdBy    User      @relation("StockAdditionCreator", fields: [createdById], references: [id], onUpdate: NoAction)
  product      Product   @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  supplier     Supplier? @relation(fields: [supplierId], references: [id], onUpdate: NoAction)

  @@index([createdById], map: "idx_stock_additions_created_by")
  @@index([productId], map: "idx_stock_additions_product_id")
  @@index([purchaseDate], map: "idx_stock_additions_purchase_date")
  @@index([supplierId], map: "idx_stock_additions_supplier_id")
  @@index([purchaseDate, totalCost], map: "idx_stock_additions_purchase_date_total_cost")
  @@map("stock_additions")
}

model StockReconciliation {
  id           Int                          @id @default(autoincrement())
  title        String                       @db.VarChar(255)
  description  String?
  notes        String?
  createdAt    DateTime?                    @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt    DateTime?                    @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  submittedAt  DateTime?                    @map("submitted_at") @db.Timestamptz(6)
  approvedAt   DateTime?                    @map("approved_at") @db.Timestamptz(6)
  createdById  Int                          @map("created_by")
  approvedById Int?                         @map("approved_by")
  status       stock_reconciliation_status? @default(DRAFT)
  items        StockReconciliationItem[]
  approvedBy   User?                        @relation("ReconciliationApprover", fields: [approvedById], references: [id], onUpdate: NoAction)
  createdBy    User                         @relation("ReconciliationCreator", fields: [createdById], references: [id], onUpdate: NoAction)

  @@index([approvedById], map: "idx_stock_reconciliations_approved_by")
  @@index([createdAt], map: "idx_stock_reconciliations_created_at")
  @@index([createdById], map: "idx_stock_reconciliations_created_by")
  @@index([status], map: "idx_stock_reconciliations_status")
  @@map("stock_reconciliations")
}

model StockReconciliationItem {
  id                Int                 @id @default(autoincrement())
  systemCount       Int                 @map("system_count")
  physicalCount     Int                 @map("physical_count")
  discrepancy       Int                 @map("discrepancy")
  discrepancyReason String?             @map("discrepancy_reason")
  estimatedImpact   Decimal?            @map("estimated_impact") @db.Decimal(10, 2)
  notes             String?
  verified          Boolean             @default(false)
  reconciliationId  Int                 @map("reconciliation_id")
  productId         Int                 @map("product_id")
  product           Product             @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  reconciliation    StockReconciliation @relation(fields: [reconciliationId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([productId], map: "idx_stock_reconciliation_items_product_id")
  @@index([reconciliationId], map: "idx_stock_reconciliation_items_reconciliation_id")
  @@map("stock_reconciliation_items")
}

model StockAdjustment {
  id                                         Int             @id @default(autoincrement())
  quantity                                   Int
  reason                                     String
  notes                                      String?
  adjustment_type                            String          @db.VarChar(50)
  approved_at                                DateTime?       @db.Timestamptz(6)
  approved_by                                Int?
  created_at                                 DateTime?       @default(now()) @db.Timestamptz(6)
  new_quantity                               Int
  old_quantity                               Int
  product_id                                 Int?
  reference_number                           String?         @db.VarChar(100)
  rejection_reason                           String?
  status                                     String          @default("PENDING") @db.VarChar(20)
  updated_at                                 DateTime?       @default(now()) @db.Timestamptz(6)
  user_id                                    Int
  variant_id                                 Int?
  products                                   Product?        @relation(fields: [product_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_stock_adjustments_product_id")
  users_stock_adjustments_user_idTousers     User            @relation("stock_adjustments_user_idTousers", fields: [user_id], references: [id], onUpdate: NoAction, map: "fk_stock_adjustments_user_id")
  product_variants                           ProductVariant? @relation(fields: [variant_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_stock_adjustments_variant_id")
  users_stock_adjustments_approved_byTousers User?           @relation("stock_adjustments_approved_byTousers", fields: [approved_by], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([adjustment_type], map: "idx_stock_adjustments_adjustment_type")
  @@index([approved_by], map: "idx_stock_adjustments_approved_by")
  @@index([created_at], map: "idx_stock_adjustments_created_at")
  @@index([product_id], map: "idx_stock_adjustments_product_id")
  @@index([status], map: "idx_stock_adjustments_status")
  @@index([user_id], map: "idx_stock_adjustments_user_id")
  @@index([variant_id], map: "idx_stock_adjustments_variant_id")
  @@map("stock_adjustments")
}

model AuditLog {
  id         Int       @id @default(autoincrement())
  action     String    @db.VarChar(100)
  created_at DateTime? @default(now()) @db.Timestamptz(6)
  ip_address String?   @db.Inet
  new_values Json?
  old_values Json?
  record_id  Int?
  table_name String    @db.VarChar(100)
  user_agent String?
  user_id    Int?
  users      User?     @relation(fields: [user_id], references: [id], onUpdate: NoAction)

  @@index([created_at], map: "idx_audit_logs_created_at")
  @@index([record_id], map: "idx_audit_logs_record_id")
  @@index([table_name], map: "idx_audit_logs_table_name")
  @@index([user_id], map: "idx_audit_logs_user_id")
  @@map("audit_logs")
}

model AIContent {
  id                Int       @id @default(autoincrement())
  approved_at       DateTime? @db.Timestamptz(6)
  approved_by       Int?
  confidence_score  Decimal?  @db.Decimal(3, 2)
  content_type      String    @db.VarChar(50)
  created_at        DateTime? @default(now()) @db.Timestamptz(6)
  generated_content String
  is_approved       Boolean?  @default(false)
  model_used        String?   @db.VarChar(100)
  original_content  String?
  product_id        Int
  prompt_used       String?
  updated_at        DateTime? @default(now()) @db.Timestamptz(6)
  users             User?     @relation(fields: [approved_by], references: [id], onDelete: NoAction, onUpdate: NoAction)
  products          Product   @relation(fields: [product_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([content_type], map: "idx_ai_content_content_type")
  @@index([is_approved], map: "idx_ai_content_is_approved")
  @@index([product_id], map: "idx_ai_content_product_id")
  @@map("ai_content")
}

model RateLimit {
  id        Int      @id @default(autoincrement())
  key       String   @db.VarChar(255)
  count     Int      @default(1)
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)

  @@index([key], map: "idx_rate_limit_key")
  @@index([createdAt], map: "idx_rate_limit_created_at")
  @@map("rate_limits")
}

model SessionBlacklist {
  id            Int      @id @default(autoincrement())
  sessionId     String   @map("session_id") @db.VarChar(255)
  userId        Int      @map("user_id")
  reason        String   @db.VarChar(100)
  blacklistedAt DateTime @map("blacklisted_at") @db.Timestamptz(6)
  expiresAt     DateTime @map("expires_at") @db.Timestamptz(6)
  createdAt     DateTime @default(now()) @map("created_at") @db.Timestamptz(6)

  @@index([sessionId], map: "idx_session_blacklist_session_id")
  @@index([userId], map: "idx_session_blacklist_user_id")
  @@index([expiresAt], map: "idx_session_blacklist_expires_at")
  @@map("session_blacklist")
}

model FinancialTransaction {
  id                Int             @id @default(autoincrement())
  transactionNumber String          @unique @map("transaction_number") @db.VarChar(50)
  type              FinancialType
  amount            Decimal         @db.Decimal(15, 2)
  description       String?
  transactionDate   DateTime        @map("transaction_date") @db.Date
  status            FinancialStatus @default(COMPLETED)
  approvedBy        Int?            @map("approved_by")
  approvedAt        DateTime?       @map("approved_at") @db.Timestamptz(6)
  createdBy         Int             @map("created_by")
  createdAt         DateTime        @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt         DateTime        @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  paymentMethod     PaymentMethod?
  expenseDetails    ExpenseDetail?
  approvedByUser    User?           @relation("TransactionApprover", fields: [approvedBy], references: [id])
  createdByUser     User            @relation("TransactionCreator", fields: [createdBy], references: [id])
  incomeDetails     IncomeDetail?

  @@index([type], map: "idx_financial_transactions_type")
  @@index([transactionDate], map: "idx_financial_transactions_date")
  @@index([status], map: "idx_financial_transactions_status")
  @@index([createdBy], map: "idx_financial_transactions_created_by")
  @@index([type, transactionDate], map: "idx_financial_transactions_type_date")
  @@index([status, transactionDate], map: "idx_financial_transactions_status_date")
  @@map("financial_transactions")
}

model ExpenseDetail {
  id            Int                  @id @default(autoincrement())
  transactionId Int                  @unique @map("transaction_id")
  vendorName    String?              @map("vendor_name") @db.VarChar(255)
  createdAt     DateTime             @default(now()) @map("created_at") @db.Timestamptz(6)
  expenseType   ExpenseType
  transaction   FinancialTransaction @relation(fields: [transactionId], references: [id], onDelete: Cascade)

  @@map("expense_details")
}

model IncomeDetail {
  id            Int                  @id @default(autoincrement())
  transactionId Int                  @unique @map("transaction_id")
  payerName     String?              @map("payer_name") @db.VarChar(255)
  createdAt     DateTime             @default(now()) @map("created_at") @db.Timestamptz(6)
  incomeSource  IncomeSource
  transaction   FinancialTransaction @relation(fields: [transactionId], references: [id], onDelete: Cascade)

  @@map("income_details")
}

model FinancialReport {
  id              Int      @id @default(autoincrement())
  reportType      String   @map("report_type") @db.VarChar(50)
  reportName      String   @map("report_name") @db.VarChar(255)
  periodStart     DateTime @map("period_start") @db.Date
  periodEnd       DateTime @map("period_end") @db.Date
  reportData      Json     @map("report_data")
  generatedBy     Int      @map("generated_by")
  generatedAt     DateTime @default(now()) @map("generated_at") @db.Timestamptz(6)
  fileUrl         String?  @map("file_url") @db.VarChar(500)
  generatedByUser User     @relation("ReportGenerator", fields: [generatedBy], references: [id])

  @@index([reportType], map: "idx_financial_reports_type")
  @@index([periodStart], map: "idx_financial_reports_period_start")
  @@index([generatedBy], map: "idx_financial_reports_generated_by")
  @@map("financial_reports")
}

model Coupon {
  id            Int         @id @default(autoincrement())
  code          String      @unique @db.VarChar(50)
  name          String      @db.VarChar(255)
  description   String?
  type          CouponType
  value         Decimal     @db.Decimal(10, 2)
  minimumAmount Decimal?    @map("minimum_amount") @db.Decimal(10, 2)
  maxUses       Int?        @map("max_uses")
  currentUses   Int         @default(0) @map("current_uses")
  isActive      Boolean     @default(true) @map("is_active")
  wordpress_id  Int?        @map("wordpress_id")
  validFrom     DateTime    @map("valid_from") @db.Timestamptz(6)
  validUntil    DateTime    @map("valid_until") @db.Timestamptz(6)
  createdBy     Int         @map("created_by")
  createdAt     DateTime    @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt     DateTime    @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  createdByUser User        @relation("CouponCreator", fields: [createdBy], references: [id])
  salesItems    SalesItem[]

  @@index([code], map: "idx_coupons_code")
  @@index([isActive], map: "idx_coupons_active")
  @@index([validFrom], map: "idx_coupons_valid_from")
  @@index([validUntil], map: "idx_coupons_valid_until")
  @@index([createdBy], map: "idx_coupons_created_by")
  @@map("coupons")
}

model Customer {
  id                Int                @id @default(autoincrement())
  name              String?            @db.VarChar(255)
  email             String?            @unique @db.VarChar(255)
  phone             String?            @db.VarChar(20)
  billingAddress    String?            @map("billing_address")
  shippingAddress   String?            @map("shipping_address")
  city              String?            @db.VarChar(100)
  state             String?            @db.VarChar(100)
  postalCode        String?            @map("postal_code") @db.VarChar(20)
  country           String?            @default("Nigeria") @db.VarChar(100)
  customerType      String?            @default("individual") @map("customer_type") @db.VarChar(50)
  notes             String?
  isActive          Boolean            @default(true) @map("is_active")
  wordpress_id      Int?               @map("wordpress_id")
  createdAt         DateTime           @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt         DateTime           @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  salesTransactions SalesTransaction[]

  @@index([phone], map: "idx_customers_phone")
  @@index([state], map: "idx_customers_state")
  @@index([city], map: "idx_customers_city")
  @@index([customerType], map: "idx_customers_customer_type")
  @@index([isActive], map: "idx_customers_is_active")
  @@map("customers")
}

model TransactionFee {
  id            Int              @id @default(autoincrement())
  transactionId Int              @map("transaction_id")
  feeType       String           @map("fee_type") @db.VarChar(50)
  description   String?          @db.VarChar(255)
  amount        Decimal          @db.Decimal(10, 2)
  createdAt     DateTime?        @default(now()) @map("created_at") @db.Timestamptz(6)
  transaction   SalesTransaction @relation(fields: [transactionId], references: [id], onDelete: Cascade)

  @@index([transactionId], map: "idx_transaction_fees_transaction_id")
  @@index([feeType], map: "idx_transaction_fees_fee_type")
  @@map("transaction_fees")
}

enum CouponType {
  PERCENTAGE
  FIXED
}

enum UserRole {
  ADMIN
  MANAGER
  STAFF
}

enum UserStatus {
  PENDING
  VERIFIED
  APPROVED
  REJECTED
  SUSPENDED
}

enum stock_reconciliation_status {
  DRAFT
  PENDING
  APPROVED
  REJECTED
}

enum FinancialType {
  EXPENSE
  INCOME
}

enum FinancialStatus {
  PENDING
  COMPLETED
  CANCELLED
  APPROVED
  REJECTED
}

enum PaymentMethod {
  CASH
  BANK_TRANSFER
  POS_MACHINE
  CREDIT_CARD
  MOBILE_MONEY
}

enum ProductStatus {
  ACTIVE
  INACTIVE
  OUT_OF_STOCK
  DISCONTINUED
}

enum ExpenseType {
  INVENTORY_PURCHASES
  UTILITIES
  RENT
  SALARIES
  MARKETING
  OFFICE_SUPPLIES
  TRAVEL
  INSURANCE
  MAINTENANCE
  OTHER
}

enum IncomeSource {
  SALES
  SERVICES
  INVESTMENTS
  ROYALTIES
  COMMISSIONS
  OTHER
}
