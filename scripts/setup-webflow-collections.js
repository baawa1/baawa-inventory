#!/usr/bin/env node

/**
 * Setup Webflow Collections
 * This script creates the Products, Categories, and Brands collections in Webflow
 */

const path = require("path");
require("dotenv").config({ path: path.join(__dirname, "..", ".env.local") });

async function setupWebflowCollections() {
  console.log("üèóÔ∏è  Setting up Webflow Collections...\n");

  try {
    // Import required modules
    const { WebflowClient } = require("../src/lib/webflow/client.ts");
    const {
      webflowCollectionManager,
    } = require("../src/lib/webflow/collections.ts");

    // Check environment variables
    const siteId = process.env.WEBFLOW_SITE_ID;
    const apiToken = process.env.WEBFLOW_API_TOKEN;

    if (!siteId || !apiToken) {
      throw new Error("Missing Webflow credentials in environment variables");
    }

    console.log("üîß Initializing Webflow Client...");
    const client = new WebflowClient(apiToken, siteId);

    // Validate connection first
    console.log("üîå Validating connection...");
    const connectionResult = await client.validateConnection();

    if (!connectionResult.valid) {
      throw new Error(`Connection failed: ${connectionResult.error}`);
    }

    console.log(
      `‚úÖ Connected to: ${connectionResult.site.name || connectionResult.site.shortName}\n`
    );

    // Setup collections using the collection manager
    console.log("üìö Setting up collections...");
    const setupResult = await webflowCollectionManager.setupCollections();

    if (setupResult.success) {
      console.log("‚úÖ Collections setup successful!\n");

      console.log("üìä Created Collections:");

      if (setupResult.collections.categories) {
        console.log(
          `  ‚úÖ Categories Collection: ${setupResult.collections.categories.id}`
        );
        console.log(
          `     Fields: ${setupResult.collections.categories.fields.length}`
        );
      }

      if (setupResult.collections.brands) {
        console.log(
          `  ‚úÖ Brands Collection: ${setupResult.collections.brands.id}`
        );
        console.log(
          `     Fields: ${setupResult.collections.brands.fields.length}`
        );
      }

      if (setupResult.collections.products) {
        console.log(
          `  ‚úÖ Products Collection: ${setupResult.collections.products.id}`
        );
        console.log(
          `     Fields: ${setupResult.collections.products.fields.length}`
        );
      }

      console.log("\nüéØ What's included in each collection:");

      console.log("\nüì¶ Products Collection:");
      console.log("  ‚Ä¢ Basic info: Name, SKU, Description, Barcode");
      console.log("  ‚Ä¢ Pricing: Cost Price, Selling Price, Online Price");
      console.log(
        "  ‚Ä¢ Inventory: Stock Quantity, Min Stock Level, In Stock status"
      );
      console.log("  ‚Ä¢ Product details: Weight, Dimensions, Status");
      console.log("  ‚Ä¢ Media: Images (multiple), Featured Image");
      console.log("  ‚Ä¢ SEO: Meta Title, Meta Description, Tags");
      console.log("  ‚Ä¢ Tracking: Inventory ID, Last Synced");

      console.log("\nüìÇ Categories Collection:");
      console.log("  ‚Ä¢ Basic: Name, Description, Image");
      console.log("  ‚Ä¢ Organization: Active status, Sort Order");
      console.log("  ‚Ä¢ SEO: Meta Title, Meta Description");
      console.log("  ‚Ä¢ Tracking: Inventory ID, Last Synced");

      console.log("\nüè∑Ô∏è  Brands Collection:");
      console.log("  ‚Ä¢ Basic: Name, Description, Logo, Website");
      console.log("  ‚Ä¢ Organization: Active status, Sort Order");
      console.log("  ‚Ä¢ SEO: Meta Title, Meta Description");
      console.log("  ‚Ä¢ Tracking: Inventory ID, Last Synced");

      console.log("\nüöÄ Next Steps:");
      console.log("1. ‚úÖ Collections are ready!");
      console.log("2. üîÑ Test syncing data from your inventory");
      console.log("3. üì± Check your Webflow CMS to see the new collections");
      console.log(
        "4. üé® Start designing your Webflow pages using these collections"
      );
    } else {
      console.error("‚ùå Collection setup failed:");
      setupResult.errors.forEach((error) => {
        console.error(`  ‚Ä¢ ${error}`);
      });
      process.exit(1);
    }
  } catch (error) {
    console.error("‚ùå Setup failed:", error.message);
    console.error("\nTroubleshooting:");
    console.error(
      "1. Check your Webflow API token has collection creation permissions"
    );
    console.error("2. Verify your Webflow plan supports API access");
    console.error("3. Ensure your site isn't at the collection limit");
    process.exit(1);
  }
}

// Run the setup
setupWebflowCollections();
